package com.term.ddetails.domain;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import java.util.Objects;

/**
 * Generated by JHipster IDE plugin
 */
@ApiModel(description = "Generated by JHipster IDE plugin")
@Entity
@Table(name = "rejected_reason_type")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class RejectedReasonType implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "reason_type")
    private Integer reasonType;

    @Column(name = "reject_reason_desc")
    private String rejectReasonDesc;

    @OneToMany(mappedBy = "rejectedReasonType")
    @JsonIgnore
    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
    private Set<RejectedReasons> reasonTypes = new HashSet<>();

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getReasonType() {
        return reasonType;
    }

    public RejectedReasonType reasonType(Integer reasonType) {
        this.reasonType = reasonType;
        return this;
    }

    public void setReasonType(Integer reasonType) {
        this.reasonType = reasonType;
    }

    public String getRejectReasonDesc() {
        return rejectReasonDesc;
    }

    public RejectedReasonType rejectReasonDesc(String rejectReasonDesc) {
        this.rejectReasonDesc = rejectReasonDesc;
        return this;
    }

    public void setRejectReasonDesc(String rejectReasonDesc) {
        this.rejectReasonDesc = rejectReasonDesc;
    }

    public Set<RejectedReasons> getReasonTypes() {
        return reasonTypes;
    }

    public RejectedReasonType reasonTypes(Set<RejectedReasons> rejectedReasons) {
        this.reasonTypes = rejectedReasons;
        return this;
    }

    public RejectedReasonType addReasonType(RejectedReasons rejectedReasons) {
        this.reasonTypes.add(rejectedReasons);
        rejectedReasons.setRejectedReasonType(this);
        return this;
    }

    public RejectedReasonType removeReasonType(RejectedReasons rejectedReasons) {
        this.reasonTypes.remove(rejectedReasons);
        rejectedReasons.setRejectedReasonType(null);
        return this;
    }

    public void setReasonTypes(Set<RejectedReasons> rejectedReasons) {
        this.reasonTypes = rejectedReasons;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RejectedReasonType rejectedReasonType = (RejectedReasonType) o;
        if (rejectedReasonType.getId() == null || getId() == null) {
            return false;
        }
        return Objects.equals(getId(), rejectedReasonType.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getId());
    }

    @Override
    public String toString() {
        return "RejectedReasonType{" +
            "id=" + getId() +
            ", reasonType='" + getReasonType() + "'" +
            ", rejectReasonDesc='" + getRejectReasonDesc() + "'" +
            "}";
    }
}
